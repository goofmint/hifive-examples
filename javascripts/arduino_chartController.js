// Generated by CoffeeScript 1.7.1
(function() {

  /**
  データ生成関数
   */
  var DUMMY_DATA_SIZE, createChartDummyData, getChartData, pageController;
  DUMMY_DATA_SIZE = 300;
  createChartDummyData = function(median, vibration, size) {
    var i, ret;
    ret = [];
    i = 0;
    if (typeof size === 'undefined') {
      size = DUMMY_DATA_SIZE;
    }
    while (i < size) {
      ret.push({
        y: median + (Math.random() - 0.5) * vibration * 2
      });
      i++;
    }
    return ret;
  };
  getChartData = function() {
    return h5.ajax({
      url: '/data.json',
      type: 'get',
      dataType: 'json'
    });
  };
  pageController = {
    __name: "ui.chart.pageController",
    _series: [],
    _dataIndex: 0,
    _width: 600,
    _height: 480,
    _chartController: h5.ui.components.chart.ChartController,
    __meta: {
      _chartController: {
        rootElement: "#chart"
      }
    },
    __ready: function(context) {
      var _this;
      _this = this;
      this._createNewSeries().then(function(data) {
        _this._series.push(data);
        return _this._chartController.draw({
          chartSetting: {
            width: _this._width,
            height: _this._height
          },
          axes: {
            xaxis: {
              off: true
            },
            yaxis: {
              lineNum: 10,
              fontSize: "7pt",
              autoScale: function(min, max) {
                return {
                  rangeMax: 1000,
                  rangeMin: 0
                };
              },
              range: {
                min: 0,
                max: 1000
              }
            }
          },
          seriesDefault: {
            dispDataSize: data.data.length,
            mouseover: {
              tooltip: false
            }
          },
          series: _this._series
        });
      });
      return setInterval(function() {
        return getChartData().then(function(data) {
          var i, ret, _i, _len;
          ret = [];
          for (_i = 0, _len = data.length; _i < _len; _i++) {
            i = data[_i];
            ret.push({
              y: i
            });
          }
          return _this.go(ret);
        });
      }, 1000);
    },
    go: function(data) {
      var addData, movedNum;
      movedNum = this._chartController.go(1);
      if (movedNum === 1) {
        return true;
      }
      addData = [
        {
          name: this._series[0].name,
          data: data[0]
        }
      ];
      console.log(addData);
      this._chartController.addData(addData);
      return this._dataIndex++;
    },
    _createNewSeries: function() {
      var dfd, _this;
      dfd = this.deferred();
      _this = this;
      getChartData().then(function(data) {
        var i, name, ret, _i, _len;
        ret = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          i = data[_i];
          ret.push({
            y: i
          });
        }
        name = "series_" + _this._series.length;
        return dfd.resolve({
          name: name,
          type: "line",
          data: ret,
          color: "#1E98B9",
          animateNum: 20
        });
      });
      return dfd.promise();
    }
  };
  h5.core.expose(pageController);
})();

$(function() {
  h5.core.controller("body", ui.chart.pageController);
});
